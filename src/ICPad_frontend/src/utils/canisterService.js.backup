import { Actor, HttpAgent } from "@dfinity/agent";
import { ICPad_backend } from "../../ICPad_backend";
import MotokoCompiler from "./motokoCompiler";

const agent = new HttpAgent({ host: "http://127.0.0.1:4943" });
const motokoCompiler = new MotokoCompiler();

// Initialize the actor
const ICPad_backend_actor = Actor.createActor(ICPad_backend, {
  agent,
  canisterId: process.env.CANISTER_ID_ICPAD_BACKEND,
});

// Project management functions
export const createProject = async (name, language, initialCode) => {
  try {
    const result = await ICPad_backend_actor.create_project(name, language, initialCode);
    if ('Ok' in result) {
      return { success: true, projectId: result.Ok };
    } else {
      return { success: false, error: result.Err };
    }
  } catch (error) {
    return { success: false, error: error.message };
  }
};

export const getProject = async (projectId) => {
  try {
    const result = await ICPad_backend_actor.get_project(projectId);
    if ('Ok' in result) {
      const project = JSON.parse(result.Ok);
      return { success: true, project };
    } else {
      return { success: false, error: result.Err };
    }
  } catch (error) {
    return { success: false, error: error.message };
  }
};

export const listProjects = async () => {
  try {
    const result = await ICPad_backend_actor.list_projects();
    if ('Ok' in result) {
      const projects = JSON.parse(result.Ok);
      return { success: true, projects };
    } else {
      return { success: false, error: result.Err };
    }
  } catch (error) {
    return { success: false, error: error.message };
  }
};

export const updateProjectCode = async (projectId, newCode) => {
  try {
    const result = await ICPad_backend_actor.update_project_code(projectId, newCode);
    if ('Ok' in result) {
      return { success: true };
    } else {
      return { success: false, error: result.Err };
    }
  } catch (error) {
    return { success: false, error: error.message };
  }
};

// Enhanced compilation with local Motoko compiler
export const compileProject = async (projectId) => {
  try {
    // First get the project
    const projectResult = await getProject(projectId);
    if (!projectResult.success) {
      return { success: false, error: projectResult.error };
    }

    const project = projectResult.project;
    
    // Use local compiler for Motoko
    if (project.language === 'motoko') {
      const compileResult = await motokoCompiler.compile(project.code);
      return { success: true, result: compileResult };
    }
    
    // For other languages, use backend compilation
    const result = await ICPad_backend_actor.compile_project(projectId);
    if ('Ok' in result) {
      const compileResult = JSON.parse(result.Ok);
      return { success: true, result: compileResult };
    } else {
      return { success: false, error: result.Err };
    }
  } catch (error) {
    return { success: false, error: error.message };
  }
};

export const compileMotoko = async (code) => {
  try {
    const result = await motokoCompiler.compile(code);
    return { success: true, result };
  } catch (error) {
    return { success: false, error: error.message };
  }
};

export const deployProject = async (projectId) => {
  try {
    const result = await ICPad_backend_actor.deploy_project(projectId);
    if ('Ok' in result) {
      const deployResult = JSON.parse(result.Ok);
      return { success: true, result: deployResult };
    } else {
      return { success: false, error: result.Err };
    }
  } catch (error) {
    return { success: false, error: error.message };
  }
};

export const testProject = async (projectId, testInput) => {
  try {
    const result = await ICPad_backend_actor.test_project(projectId, testInput);
    if ('Ok' in result) {
      const testResult = JSON.parse(result.Ok);
      return { success: true, result: testResult };
    } else {
      return { success: false, error: result.Err };
    }
  } catch (error) {
    return { success: false, error: error.message };
  }
};

export const executeTerminalCommand = async (command, projectId) => {
  try {
    const result = await ICPad_backend_actor.execute_terminal_command(command, projectId ? [projectId] : []);
    if ('Ok' in result) {
      return { success: true, output: result.Ok };
    } else {
      return { success: false, error: result.Err };
    }
  } catch (error) {
    return { success: false, error: error.message };
  }
};

export const checkCanisterConnection = async () => {
  try {
    const result = await ICPad_backend_actor.check_connection();
    if ('Ok' in result) {
      return { connected: true };
    } else {
      return { connected: false, error: result.Err };
    }
  } catch (error) {
    return { connected: false, error: error.message };
  }
};
